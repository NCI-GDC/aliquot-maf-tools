[build-system]
requires = ["flit_scm"]
build-backend = "flit_scm:buildapi"

[project]
name = "aliquot-maf-tools"
description = "Tools for creating and filtering aliquot-level MAFs"
authors = [
    {name = "Charles Czysz", email = "czysz@uchicago.edu"}
]

readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: Apache Software License",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3 :: Only"
]
dynamic = ["version"]
dependencies = [
    "bioinf-maflib>=2.3.0",
    "pysam",
    "pandas",
    "pyarrow>=4.0",
]

[project.optional-dependencies]
build = [
  "setuptools_scm",
  "flit",
  "twine",
]

dev = [
    "black",
    "detect-secrets",
    "ruff",
    "mypy",
    "pre-commit>=2.9.0",
    "tox",
]

test = [
    "coverage[toml]",
    "pytest",
]

type = []

[project.urls]
homepage = "https://github.com/NCI-GDC/aliquot-maf-tools"

[project.scripts]
"aliquotmaf" = "aliquotmaf.__main__:main"

[tool.setuptools_scm]
write_to = "aliquotmaf/_version.py"
local_scheme = "dirty-tag"
version_scheme = "python-simplified-semver"
fallback_version = "0"

[tool.coverage.run]
source = ["aliquotmaf"]
branch = true
parallel = true

[tool.flit.module]
name = "aliquotmaf"

[tool.flit.sdist]
include = ["aliquotmaf/_version.py"]
exclude = [
        ".*",
        "dev-requirements.*",
        "Dockerfile",
        "Jenkinsfile",
        "*travis.yml",
        "tox.ini",
]

[tool.mypy]
python_version = 3.12
disallow_untyped_defs = true
warn_return_any = true
warn_unused_configs = true

[tool.coverage.report]
show_missing = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = 'py312'

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
